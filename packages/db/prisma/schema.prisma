// schema.prisma â€” Minimal MVP with Auth.js + Content + Tags + Collections + Embeddings + single note per content

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/////////////////////////////
// Auth.js (NextAuth) models
/////////////////////////////

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]

  // App relations
  contents     Content[]
  tags         Tag[]
  collections  Collection[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/////////////////////////////
// App models (MVP)
/////////////////////////////

model Content {
  id          String   @id @default(cuid())
  userId      String
  url         String
  domain      String?
  title       String?
  description String?
  text        String?   // normalized extracted text (optional)
  note        String?   // single user note per content
  savedAt     DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags         ContentTag[]
  collections  CollectionItem[]
  embeddings   Embedding[]

  @@index([userId, savedAt])
  @@index([domain])
}

/////////////////////////////
// Tags (per-user namespace)
/////////////////////////////

model Tag {
  id        String       @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contents ContentTag[]

  @@unique([userId, name])
  @@index([userId])
}

model ContentTag {
  contentId String
  tagId     String
  createdAt DateTime @default(now())

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contentId, tagId])
}

/////////////////////////////
// Collections (folders)
/////////////////////////////

model Collection {
  id        String    @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CollectionItem[]

  @@unique([userId, name])
  @@index([userId])
}

model CollectionItem {
  collectionId String
  contentId    String
  addedAt      DateTime @default(now())
  position     Int?

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  content    Content    @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@id([collectionId, contentId])
  @@index([contentId])
}

/////////////////////////////
// Embeddings (simple MVP)
/////////////////////////////

model Embedding {
  id         String   @id @default(cuid())
  contentId  String
  model      String
  dimensions Int
  chunkIndex Int      @default(0)

  // pgvector column
  vector     Unsupported("vector")

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId, model, chunkIndex])
  @@index([contentId])
  @@index([model])
}
