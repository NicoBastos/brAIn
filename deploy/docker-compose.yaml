version: "3.8"

services:
  postgres:
    image: postgres:15
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-brain}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-brain}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-brain} -d ${POSTGRES_DB:-brain} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../apps/api
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      PORT: ${API_PORT:-3000}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  recommender:
    build:
      context: ../apps/recommender
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      PORT: ${RECOMMENDER_PORT:-3001}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
    ports:
      - "${RECOMMENDER_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  worker:
    build:
      context: ../apps/worker
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      QUEUE_URL: ${REDIS_URL:-redis://redis:6379}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: on-failure

  mailer-service:
    build:
      context: ../apps/mailer-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      POSTMARK_API_KEY: ${POSTMARK_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      MAIL_FROM: ${MAIL_FROM:-no-reply@example.com}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: on-failure

  admin:
    build:
      context: ../apps/admin
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      PORT: ${ADMIN_PORT:-8080}
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - "${ADMIN_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  caddy:
    image: caddy:2
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      - api
      - admin
      - recommender
    networks:
      - backend

volumes:
  db-data:

networks:
  backend:
    driver: bridge